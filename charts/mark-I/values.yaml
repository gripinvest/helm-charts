# Default values for platform.
# This is a YAML-formatted file.
type: Deployment

# -- Replica Count, this works for Deployment and Statefulset.
replicaCount: 1
# -- Global flag to enable or disbale the [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the workloads, if set to false, the values provided for security won't take effect
securityContext: true

# -- This is the main container configuration
image:
  # -- Name of the container image
  name: ""
  # image -- (string) image respository
  repository: nginx
  pullPolicy: IfNotPresent
  # -- Image tag (immutable tags are recommended), Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- This is the Init container configuration, a detailed schema of this can be found in `complete-sample-values.yaml` file.
initContianerImage: {}
# -- (array) Refer to the K8s docker container registry secrets, there could be one or more secrets.
imagePullSecrets:
  - name: gitlab-registry

nameOverride: ""
# -- Provide a name to the Helm release, usually its a good practice to specify the name here instead of using default chart name.
fullnameOverride: "mark-I"

# -- Creation of the service kubernetes service account and used by the type of k8s object deployed though the chart
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account (eg: for workload identity)
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullnameOverride.
  name: ""

# -- Pod annotations
podAnnotations: {}

restartPolicy: ""

# -- [Pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod), this is implemented at the pod level
podSecurityContext:
  # -- (bool) If set to true, the application won't be able to perform any root user actions at runtime
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
    # -- (int) The user ID defined here should be the one which we mention in Dockerfile, it can be updated as per requirement.
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

# -- [Container security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container), this is implemented at the container level
containerSecurityContext:
  # -- (bool) The filesystem of the container will be read only and no file manipulations are allowed, use volume mounts for such actions
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop:
      - ALL
    # -- (int) The user ID defined here should be the one which we mention in Dockerfile, it can be updated as per requirement
  runAsUser: 1001

# appSecret:
#   {}
#   # name: SecretName

# -- These are the environment variables ( key,values pairs) which we inject in the container
extraEnv: {}

livenessProbe:
  # -- Liveness [health check] (https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/), kubelet uses liveness probes to know when to restart a container.
  # -- The probeType by default is httpGet and the port is considered as container port for healthcheck requests
  probeType: "httpGet"
  path: "/"
  scheme: "HTTP"
  initialDelaySeconds: 30
  timeoutSeconds: 15
  periodSeconds: 15
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  # -- Readiness Health check, kubelet uses readiness probes to know when a container is ready to start accepting traffic
  # -- The probeType by default is httpGet and the port is considered as container port for healthcheck requests
  probeType: "httpGet"
  path: "/"
  scheme: "HTTP"
  initialDelaySeconds: 15
  timeoutSeconds: 5
  periodSeconds: 15
  successThreshold: 1
  failureThreshold: 3

# -- kubelet uses startup probes to know when a container application has started
startupProbe:
  {}
  # exec:
  #   command:
  #   - cat
  #   - /tmp/startup
  # failureThreshold: 5
  # periodSeconds: 10

# -- Service discovery for the workload.
service:
  # -- Enable the service
  enabled: true
  # -- Type of the service, values could be ClusterIP, NodePort, LoadBalancer, ExternalName
  type: ClusterIP
  # -- The port on which service is exposed
  port: 80
  # -- The port on which the application inside the contianer is running/accessable
  containerPort: 5000

ingress:
  enabled: false
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

additionalIngress: {}

# -- We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This also increases chances charts run on environments with little resources.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
resources: {}

# -- HPA configuration for the workloads
autoscaling:
  # -- Enable the autoscaler
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  averageCPUUtilizationPercentage: 80
  # averageMemoryUtilizationPercentage: 80

# -- [Node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) for the workloads to get scheduled, identical to the syntax in k8s manifests
nodeSelector: {}

# -- [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) for the workloads, identical to the syntax in k8s manifests
tolerations: []

# -- Affinity, the values of the affinity is identical to the syntax in k8s manifests. [Refer this](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
affinity: {}

podDisruptionBudget:
  enabled: false

# -- Extra Labels we need to include in the pod or contianer deployments.
extraLabels:
  {}
  # project: "idp"
  # team: "product"
  # customer: "nyc-health"

# -- Supports persistence, configure creation of PVC, NFS mounts, emptydir, mount contianers
# Details of execution and config will be found in README document.
persistence:
  # -- Enable the Volumes in pods manifest
  enabled: false
  volumes:
    []
    # - existingPersistence: false
    #   name: "<name>-init"
    #   annotations: {}
    #   storageClass: <storage-class>
    #   accessMode: ReadWriteMany
    #   size: 10Gi
    #   mountPath: <mount_path>
    #   readOnly: false
    #   mountContainer : init

    # - existingPersistence: true
    #   name: "<name>"
    #   mountPath:<mount_path>
    #   readOnly: false
    #   mountContainer : main

    # - existingPersistence: true
    #   emptyDir: {}
    #   name: "empty-dir-check"
    #   mountPath: <mount_path>
    #   readOnly: false
    #   mountContainer : both

# -- Create k8s secrets, define the mount container, key value pairs and files, option to inject in application env
# Details of execution and config will be found in README document.
secrets:
  []
  # - appenv: true
  #   name: <secret-name>
  #   type: Opaque

  # - appenv: true
  #   mountContainer: main
  #   mountPath: ""
  #   name: <secret-name>
  #   type: Opaque
  #   labels:
  #     app: my-app
  #     env: dev
  #   secretData:
  #     username: admin
  #     APP_SECRET_NAME: "MY-SECRET"
  #   secretFiles:
  #     service-account.json: |
  #       {
  #         "type": "service_account",
  #         "project_id": "my-project",
  #       }
  # - dockerconfigjson: '<dockerconfigjson>'

# -- Create k8s configmaps, define the mount container, key value pairs and files, option to inject in application env
# Details of execution and config will be found in README document.
configmaps:
  []
  # - appenv: true
  #   name: <configmap-name>
  #   mountContainer: init
  #   mountPath: ""
  #   immutable: true
  #   labels:
  #     app: my-app
  #     env: dev
  #   configData:
  #     username: admin
  #     password: s3cr3t
  #     GOOGLE_APPLICATION_CREDENTIALS: In0LmNvbSIKfQo=s
  #   configFiles:
  #     game.properties: |
  #       enemy.types=aliens,monsters
  #       player.maximum-lives=5

additionalContainers: []
# - name: test-container
#   image: postgres:latest
#   securityContext: {}
#   env:
#     key1: value1
#     key2: value2
#   volumeMounts: []
#   envFrom: []
#   containerPort: 5000
#   livenessProbe:
#     probeType: "httpGet"
#     path: "/"
#     scheme: "HTTP"
#     initialDelaySeconds: 30
#     timeoutSeconds: 15
#     periodSeconds: 15
#     successThreshold: 1
#     failureThreshold: 3
#   readinessProbe:
#     probeType: "httpGet"
#     path: "/"
#     scheme: "HTTP"
#     initialDelaySeconds: 30
#     timeoutSeconds: 15
#     periodSeconds: 15
#     successThreshold: 1
#     failureThreshold: 3
#   startupProbe: {}
#   resources: {}

